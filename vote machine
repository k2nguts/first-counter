// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.18;
contract ProposalContract {
    address owner;
    uint256 private counter;
    
constructor(){
        owner = msg.sender;
        voted_addresses.push(msg.sender);
    }
    modifier Onlyowner(){
        require(msg.sender == owner);
        _;
    }
    modifier active(){
        require(proposal_history[counter].is_active==true, "this is not active");
        _;
    }
    modifier newvoter(){
        require(!isVoted(address),"already voted");
        _;
    }
    address[] private voted_addresses;

    struct Proposal {
        string description;//açıklama
        uint256 approve;//numb of approve vote
        uint256 reject; //numb of reject vote
        uint256 pass ; //numb of pass vote
        uint256 total_vote_end; // alinabilecek maks vote
        bool current_state; //calisip calismadigini gosterir
        bool is_active; //baskalarinin vote verip vermedigini gosterir
        string titlefield; //title of decription 
    }
   mapping(uint256 => Proposal) proposal_history; //record proposal history

//second step create function which we can change
function create(string calldata _description, uint256 _total_vote_end, string calldata _titlefield)external Onlyowner {//calldata means immutable call data more efficiently than temporary memory\

    counter += 1 ;
    proposal_history[counter] = Proposal(_description, 0 ,0, 0, _total_vote_end, false, true,_titlefield);  
}
function setowner(address new_owner) external Onlyowner{
    owner = new_owner;
}

function calculateCurrentState() private view returns(bool) {
    Proposal storage proposal = proposal_history[counter];

    uint256 approve = proposal.approve;
    uint256 reject = proposal.reject;
    uint256 pass = proposal.pass;
    uint256 sum = proposal.pass + proposal.reject;    
    if ( sum % 2 == 1) {
        sum -= 1;
    }

    sum = sum/2;

    if (approve > sum) {
        return true;
    } else {
        return false;
    }
} 

function vote(uint8 choice) external {
Proposal storage proposal = proposal_history[counter];
uint256 total_vote = proposal.approve + proposal.reject + proposal.pass;
voted_addresses.push(msg.sender);
if (choice== 1) {
    proposal.approve += 1 ;
    proposal.current_state = calculateCurrentState();
}
else if (choice==2){
    proposal.reject += 1 ;
    proposal.current_state = calculateCurrentState();

}
else if (choice =0){
    proposal.pass += 1;
    proposal.current_state = calculateCurrentState();

}


if ((proposal.total_vote_end - total_vote == 1)&& (choice == 1  || choice==2 || choice==0)){
    proposal.is_active == false;
}
}
}
